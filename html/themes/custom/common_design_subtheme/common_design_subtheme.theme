<?php

/**
 * @file
 * Template overrides, preprocess, and hooks for the OCHA Common Design theme.
 */

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function common_design_subtheme_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $is_front = \Drupal::service('path.matcher')->isFrontPage();

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'page__' . $node->bundle();
  }

  if ($is_front && $node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'page__front__' . $node->bundle();
  }
}

/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 */
function common_design_subtheme_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\taxonomy\TermInterface $term */
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->id() . '__' . $sanitized_view_mode;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function common_design_subtheme_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  $is_front = \Drupal::service('path.matcher')->isFrontPage();
  $suggestions = [];
  $node = $variables['elements']['#node'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  $suggestions[] = 'node__' . $sanitized_view_mode;
  $suggestions[] = 'node__' . $node
    ->bundle();
  $suggestions[] = 'node__' . $node
    ->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'node__' . $node
    ->id();
  $suggestions[] = 'node__' . $node
    ->id() . '__' . $sanitized_view_mode;
  if ($is_front && $node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'node__front__' . $node
      ->bundle() . '__' . $sanitized_view_mode;
  }
  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function common_design_subtheme_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $entity_type = $variables['element']['#entity_type'];
  $bundle = $variables['element']['#bundle'];
  $field_name = $variables['element']['#field_name'];
  $sanitized_view_mode = strtr($variables['element']['#view_mode'], '.', '_');
  $suggestions[] = 'field__' . $entity_type . '__' . $sanitized_view_mode . '__' . $field_name;
  $suggestions[] = 'field__' . $entity_type . '__' . $bundle . '__' . $sanitized_view_mode . '__' . $field_name;
  return $suggestions;
}

/**
 * Implements hook_preprocess_menu().
 *
 * Flag main navigation menu items with more than 2 nested levels of children as
 * "mega menus"s to ease styling.
 */
function common_design_subtheme_preprocess_menu__main(array &$variables) {
  if (!empty($variables['items'])) {
    foreach ($variables['items'] as $key => $item) {
      if (!empty($item['below'])) {
        foreach ($item['below'] as $child) {
          if (!empty($child['below'])) {
            $variables['items'][$key]['is_mega_menu'] = TRUE;
            $variables['items'][$key]['max_level'] = 2;
          }
        }
      }
    }
  }
}
