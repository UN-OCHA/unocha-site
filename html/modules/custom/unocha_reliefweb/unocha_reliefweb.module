<?php

/**
 * @file
 * Module file for the ReliefWeb integration.
 */

use Drupal\unocha_reliefweb\Services\ReliefWebApiClient;
use Drupal\unocha_utility\Helpers\DateHelper;
use Drupal\unocha_utility\Helpers\HtmlSanitizer;
use Drupal\unocha_utility\Helpers\HtmlSummarizer;
use Drupal\unocha_utility\Helpers\UrlHelper;

/**
 * Implements hook_theme().
 */
function unocha_reliefweb_theme() {
  $themes = [
    // Theme for a ReliefWeb document.
    'unocha_reliefweb_document' => [
      'variables' => [
        // Heading level.
        'level' => 1,
        // Wrapper attributes.
        'attributes' => NULL,
        // Document title.
        'title' => NULL,
        // Attributes for the title.
        'title_attributes' => NULL,
        // Document publication date.
        'date' => NULL,
        // Document's main content.
        'content' => NULL,
        // Attributes for the content.
        'content_attributes' => NULL,
      ],
    ],
    // Theme for a list of attachments.
    'unocha_reliefweb_attachment_list' => [
      'variables' => [
        // Section heading level.
        'level' => 2,
        // Section attributes.
        'attributes' => NULL,
        // Section title.
        'title' => t('Attachments'),
        // Section title attributes.
        'title_attributes' => NULL,
        // List of files. Each item has the following properties:
        // - url: link to the file
        // - name: file name
        // - label: file name or 'Download' etc.
        // - description: file description (extension, size, language etc.)
        'list' => [],
        // List attributes.
        'list_attributes' => NULL,
        // Section footer.
        'footer' => NULL,
        // Section footer attributes.
        'footer_attributes' => NULL,
        // Flag to indicate if the first attachment's preview should be lazy
        // loaded or not.
        'lazy_load_first_preview' => TRUE,
      ],
    ],
    // Theme for a list of articles.
    'unocha_reliefweb_river' => [
      'variables' => [
        // Heading level for the river section.
        'level' => 2,
        // The id of the river section.
        'id' => '',
        // The API resource (ex: reports).
        'resource' => '',
        // Section attributes.
        'attributes' => NULL,
        // Title of the river section.
        'title' => t('List'),
        // Title attributes.
        'title_attributes' => NULL,
        // Results attributes.
        'results_attributes' => NULL,
        // River attributes.
        'river_attributes' => NULL,
        // Results (optional). See "unocha_reliefweb_results" below.
        'results' => NULL,
        // The article entities to display.
        'entities' => [],
        // Article attributes.
        'article_attributes' => NULL,
        // View more link (optional) URL to the full river and link text.
        'more' => NULL,
        // Pager (optional). See "unocha_reliefweb_river_results" below.
        'pager' => NULL,
        // Message for when there are no items.
        'empty' => t('No results found.'),
      ],
    ],
    // Theme for a the number of results in a list of articles.
    'unocha_reliefweb_river_results' => [
      'variables' => [
        // Section attributes.
        'attributes' => NULL,
        // The total number of resources matching the search query.
        'total' => 0,
        // The start of the result range.
        'start' => 0,
        // The end of the result range.
        'end' => 0,
      ],
    ],
    // Theme for an article in a list of articles.
    'unocha_reliefweb_river_article' => [
      'variables' => [
        // Heading level for the river article.
        'level' => 3,
        // Article attributes.
        'attributes' => NULL,
        // The aricle entity's data as an associative array with id, bundle,
        // url, langcode, title etc.
        'entity' => NULL,
        // Meta information attributes.
        'meta_attributes' => NULL,
      ],
    ],
    // Theme for the title of an article in a list of articles.
    'unocha_reliefweb_river_article_title' => [
      'variables' => [
        // Heading level for the river article title.
        'level' => 3,
        // Article title attributes.
        'attributes' => NULL,
        // Language code of the title.
        'langcode' => 'en',
        // An optional HTML safe prefix.
        'prefix' => '',
        // URL to the full article.
        'url' => '',
        // Title to the article.
        'title' => '',
      ],
    ],
    // Theme for the country slug of an article.
    'unocha_reliefweb_entity_country_slug' => [
      'variables' => [
        // Wrapper attributes.
        'attributes' => NULL,
        // List of countries with the a url to either the country page or the
        // river filtered by the country, a name and a shortname.
        'countries' => [],
      ],
    ],
    // Theme for an article's detailed information (ex: source, format).
    'unocha_reliefweb_entity_meta' => [
      'variables' => [
        // Wrapper attributes.
        'attributes' => NULL,
        // Flag indicating the list of meta is the "core" meta information,
        // usually displayed in river articles or below the title on article
        // pages.
        'core' => TRUE,
        // List of meta information for an article (ex: dates, sources etc.).
        // Each meta data has the following properties: type (simple, date,
        // date-range or taglist), label, value (simple, date, array with start
        // and end date or list of tags). For tag lists, there are also count
        // and sort properties.
        'meta' => [],
      ],
    ],
  ];

  // Add themes for the main river articles.
  foreach (unocha_reliefweb_get_reliefweb_rivers() as $river) {
    $themes['unocha_reliefweb_river_article__' . $river['bundle']] = [
      'base hook' => 'unocha_reliefweb_river_article',
    ];
  }

  return $themes;
}

/**
 * Get the list of rivers and their labels.
 *
 * @return array
 *   List of river labels keyed by river and with the following data as values:
 *   - API resource
 *   - river label
 *   - entity bundle (on reliefweb)
 *   - fields: optional list of fields to include in the API results
 *   - parse: callback to parse the data retrieved from the API.
 */
function unocha_reliefweb_get_reliefweb_rivers() {
  return [
    'jobs' => [
      'resource' => 'jobs',
      'label' => t('Jobs'),
      'bundle' => 'job',
      'fields' => ['url_alias'],
      'parse' => 'unocha_reliefweb_parse_jobs_api_data',
    ],
    'training' => [
      'resource' => 'training',
      'label' => t('Training'),
      'bundle' => 'training',
      'fields' => ['url_alias'],
      'parse' => 'unocha_reliefweb_parse_training_api_data',
    ],
    'updates' => [
      'resource' => 'reports',
      'label' => t('Updates'),
      'bundle' => 'report',
      'fields' => [
        'url_alias',
        'file',
        'headline',
        'format',
        'date',
        'body-html',
      ],
      'parse' => 'unocha_reliefweb_parse_reports_api_data',
    ],
  ];
}

/**
 * Parse the ReliefWeb API data for reports.
 *
 * @param array $river
 *   River information.
 * @param array $api_data
 *   API data.
 * @param bool $white_label
 *   Whether to white label the ReliefWeb article URL or not.
 *
 * @return array
 *   List of articles with data ready to be passed to the template.
 */
function unocha_reliefweb_parse_reports_api_data(array $river, array $api_data, $white_label = TRUE) {
  $unocha_url = \Drupal::request()->getSchemeAndHttpHost() . '/';

  // Retrieve the API data (with backward compatibility).
  $items = $api_data['items'] ?? $api_data['data'] ?? [];

  // Parse the entities retrieved from the API.
  $entities = [];
  foreach ($items as $item) {
    $fields = $item['fields'];

    // Title.
    $title = $fields['title'];

    // Summary.
    $summary = '';
    if (!empty($fields['headline']['summary'])) {
      // The headline summary is plain text.
      $summary = $fields['headline']['summary'];
    }
    elseif (!empty($fields['body-html'])) {
      // Summarize the body. The average headline summary length is 182
      // characters so 200 characters sounds reasonable as there is often
      // date or location information at the beginning of the normal body
      // text, so we add a bit of margin to have more useful information in
      // the generated summary.
      $body = HtmlSanitizer::sanitize($fields['body-html']);
      $summary = HtmlSummarizer::summarize($body, 200);
    }

    // Determine document type.
    $format = '';
    if (!empty($fields['format'])) {
      if (isset($fields['format']['name'])) {
        $format = $fields['format']['name'];
      }
      elseif (isset($fields['format'][0]['name'])) {
        $format = $fields['format'][0]['name'];
      }
    }

    // Set the summary if it's empty but there are attachments.
    if (empty($summary) && !empty($fields['file'])) {
      switch ($format) {
        case 'Map':
          $summary = t('Please refer to the attached Map.');
          break;

        case 'Infographic':
          $summary = t('Please refer to the attached Infographic.');
          break;

        case 'Interactive':
          $summary = t('Please refer to the linked Interactive Content.');
          break;

        default:
          if (count($fields['file']) > 1) {
            $summary = t('Please refer to the attached files.');
            break;
          }
          else {
            $summary = t('Please refer to the attached file.');
            break;
          }
      }
    }

    // Tags (countries, sources etc.).
    $tags = unocha_reliefweb_parse_river_article_tags($fields, [
      'country' => 'country',
      'source' => 'source',
      'language' => 'language',
    ]);

    // Base article data.
    $data = [
      'id' => $item['id'],
      'bundle' => $river['bundle'],
      'title' => $title,
      'summary' => $summary,
      'format' => $format,
      'tags' => $tags,
    ];

    // Url to the article.
    $data['url'] = $white_label ? unocha_reliefweb_get_unocha_url_from_reliefweb_url($fields['url_alias']) : $fields['url_alias'];

    // Dates.
    $data += unocha_reliefweb_parse_river_article_dates($fields, [
      'created' => 'posted',
      'original' => 'published',
    ]);

    // Attachment preview.
    if (!empty($fields['file'][0]['preview'])) {
      if ($white_label) {
        ReliefWebApiClient::updateApiUrls($fields['file'][0]['preview'], $unocha_url);
      }
      $preview = $fields['file'][0]['preview'];
      $url = $preview['url-thumb'] ?? $preview['url-small'] ?? '';
      if (!empty($url)) {
        $version = $preview['version'] ?? $fields['file'][0]['id'] ?? 0;
        $data['preview'] = [
          'url' => UrlHelper::stripDangerousProtocols($url) . '?' . $version,
          // We don't have any good label/description for the file
          // previews so we use an empty alt to mark them as decorative
          // so that assistive technologies will ignore them.
          'alt' => '',
        ];
      }
    }

    // Compute the language code from the resource's data.
    $data['langcode'] = unocha_reliefweb_get_entity_language_code($data);

    $entities[$item['id']] = $data;
  }

  return $entities;
}

/**
 * Parse the ReliefWeb API data for jobs.
 *
 * @param array $river
 *   River information.
 * @param array $api_data
 *   API data.
 * @param bool $white_label
 *   Whether to white label the ReliefWeb article URL or not.
 *
 * @return array
 *   List of articles with data ready to be passed to the template.
 */
function unocha_reliefweb_parse_jobs_api_data(array $river, array $api_data, $white_label = TRUE) {
  // Retrieve the API data (with backward compatibility).
  $items = $api_data['items'] ?? $api_data['data'] ?? [];

  // Parse the entities retrieved from the API.
  $entities = [];
  foreach ($items as $item) {
    $fields = $item['fields'];

    // Title.
    $title = $fields['title'];

    // Summary.
    $summary = '';
    if (!empty($fields['body-html'])) {
      $body = HtmlSanitizer::sanitize($fields['body-html']);
      $summary = HtmlSummarizer::summarize($body, 200);
    }

    // Tags (countries, sources etc.).
    $tags = unocha_reliefweb_parse_river_article_tags($fields, [
      'country' => 'country',
      'source' => 'source',
    ]);

    // Base article data.
    $data = [
      'id' => $item['id'],
      'bundle' => $river['bundle'],
      'title' => $title,
      'summary' => $summary,
      'tags' => $tags,
    ];

    // Url to the article.
    $data['url'] = $white_label ? unocha_reliefweb_get_unocha_url_from_reliefweb_url($fields['url_alias']) : $fields['url_alias'];

    // Dates.
    $data += unocha_reliefweb_parse_river_article_dates($fields, [
      'created' => 'posted',
      'closing' => 'closing',
    ]);

    // Compute the language code for the resource's data.
    $data['langcode'] = unocha_reliefweb_get_entity_language_code($data);

    $entities[$item['id']] = $data;
  }

  return $entities;
}

/**
 * Parse the ReliefWeb API data for training.
 *
 * @param array $river
 *   River information.
 * @param array $api_data
 *   API data.
 * @param bool $white_label
 *   Whether to white label the ReliefWeb article URL or not.
 *
 * @return array
 *   List of articles with data ready to be passed to the template.
 */
function unocha_reliefweb_parse_training_api_data(array $river, array $api_data, $white_label = TRUE) {
  // Retrieve the API data (with backward compatibility).
  $items = $api_data['items'] ?? $api_data['data'] ?? [];

  // Parse the entities retrieved from the API.
  $entities = [];
  foreach ($items as $item) {
    $fields = $item['fields'];

    // Title.
    $title = $fields['title'];

    // Summary.
    $summary = '';
    if (!empty($fields['body-html'])) {
      $body = HtmlSanitizer::sanitize($fields['body-html']);
      $summary = HtmlSummarizer::summarize($body, 200);
    }

    // Tags (countries, sources etc.).
    $tags = unocha_reliefweb_parse_river_article_tags($fields, [
      'country' => 'country',
      'source' => 'source',
      'language' => 'language',
    ]);

    // Base article data.
    $data = [
      'id' => $item['id'],
      'bundle' => $this->bundle,
      'title' => $title,
      'summary' => $summary,
      'tags' => $tags,
    ];

    // Url to the article.
    $data['url'] = $white_label ? unocha_reliefweb_get_unocha_url_from_reliefweb_url($fields['url_alias']) : $fields['url_alias'];

    // Dates.
    $data += unocha_reliefweb_parse_river_article_dates($fields, [
      'created' => 'created',
      'start' => 'start',
      'end' => 'end',
      'registration' => 'registration',
    ]);

    // Compute the language code for the resource's data.
    $data['langcode'] = unocha_reliefweb_get_entity_language_code($data);

    $entities[$item['id']] = $data;
  }

  return $entities;
}

/**
 * Parse the tags for a river article from the API fields data.
 *
 * @param array $fields
 *   Field data from the ReliefWeb API.
 * @param array $list
 *   List of fields to parse keyed by field name and with tag names as values.
 *
 * @return array
 *   List of tags.
 *
 * @todo make the tags link to somewhere like on ReliefWeb?
 */
function unocha_reliefweb_parse_river_article_tags(array $fields, array $list) {
  $tags = [];

  foreach ($list as $field => $tag) {
    $data = [];
    switch ($field) {
      // Countries.
      case 'country':
        foreach ($fields[$field] ?? [] as $item) {
          $data[] = [
            'name' => $item['name'],
            'shortname' => $item['shortname'] ?? $item['name'],
            'code' => $item['iso3'] ?? '',
            'main' => !empty($item['primary']),
          ];
        }
        break;

      // Sources.
      case 'source':
        foreach ($fields[$field] ?? [] as $item) {
          $data[] = [
            'name' => $item['name'],
            'shortname' => $item['shortname'] ?? $item['name'],
          ];
        }
        break;

      // Languages.
      case 'language':
        foreach ($fields[$field] ?? [] as $item) {
          $data[] = [
            'name' => $item['name'],
            'code' => $item['code'],
          ];
        }
        break;

      // Other more simple tags.
      default:
        foreach ($fields[$field] ?? [] as $item) {
          $data[] = [
            'name' => $item['name'],
          ];
        }
    }
    if (!empty($data)) {
      $tags[$tag] = $data;
    }
  }

  return $tags;
}

/**
 * Parse the dates for a river article from the API fields data.
 *
 * @param array $fields
 *   Field data from the ReliefWeb API.
 * @param array $list
 *   List of fields to parse keyed by field name and with date names as values.
 *
 * @return array
 *   List of dates.
 */
function unocha_reliefweb_parse_river_article_dates(array $fields, array $list) {
  $dates = [];
  foreach ($list as $field => $date) {
    if (isset($fields['date'][$field])) {
      $dates[$date] = DateHelper::getDateObject($fields['date'][$field]);
    }
  }
  return $dates;
}

/**
 * Get the language code from the parse API data.
 *
 * @param array $data
 *   Parsed API data.
 */
function unocha_reliefweb_get_entity_language_code(array $data) {
  if (isset($data['langcode'])) {
    $langcode = $data['langcode'];
  }
  // Extract the main language code from the entity language tag.
  elseif (isset($data['tags']['language'])) {
    // English has priority over the other languages. If not present we
    // just get the first language code in the list.
    foreach ($data['tags']['language'] as $item) {
      if (isset($item['code'])) {
        if ($item['code'] === 'en') {
          $langcode = 'en';
          break;
        }
        elseif (!isset($langcode)) {
          $langcode = $item['code'];
        }
      }
    }
  }
  return $langcode ?? 'en';
}

/**
 * Get the ReliefWeb URL alias from the given UNOCHA URL.
 *
 * @param string $url
 *   UNOCHA URL. If empty use the current URL.
 *   Ex: https://www.unocha.org/publications/report/france/report-title.
 * @param string $path
 *   White-label path for the ReliefWeb documents on UNOCHA.
 *
 * @return string
 *   A ReliefWeb URL alias based on the given URL.
 *   Ex: https://reliefweb.int/report/france/report-title.
 */
function unocha_reliefweb_get_reliefweb_url_from_unocha_url($url = '', $path = 'publications') {
  $url = $url ?: \Drupal::request()->getRequestUri();
  $base_url = \Drupal::config('unocha_reliefweb.settings')->get('reliefweb_website') ?? 'https://reliefweb.int';
  return preg_replace('#(https://[^/]+)?/' . $path . '/#', $base_url . '/', $url);
}

/**
 * Get a UNOCHA URL from a ReliefWeb URL alias.
 *
 * @param string $alias
 *   ReliefWeb URL alias.
 *   Ex: https://reliefweb.int/report/france/report-title.
 * @param string $path
 *   White-label path for the ReliefWeb documents on UNOCHA.
 *
 * @return string
 *   A UNOCHA URL based on the given URL alias.
 *   Ex: https://www.unocha.org/publications/report/france/report-title.
 */
function unocha_reliefweb_get_unocha_url_from_reliefweb_url($alias, $path = 'publications') {
  $base_url = \Drupal::request()->getSchemeAndHttpHost();
  return preg_replace('#^https?://[^/]+/#', $base_url . '/' . $path . '/', $alias);
}
