<?php

/**
 * @file
 * Module file for unocha_menus.
 */

use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\node\NodeInterface;

/**
 * Helper function to create or update a menu link for a node.
 *
 * Note: this is a copy of `_menu_ui_node_save()` but which allows to save
 * additional fields.
 *
 * @param \Drupal\node\NodeInterface $node
 *   Node entity.
 * @param array $values
 *   Values for the menu link.
 *
 * @see _menu_ui_node_save()
 */
function unocha_menus_node_save(NodeInterface $node, array $values) {
  /** @var \Drupal\menu_link_content\MenuLinkContentInterface $entity */
  if (!empty($values['entity_id'])) {
    $entity = MenuLinkContent::load($values['entity_id']);
    if ($entity->isTranslatable()) {
      if (!$entity->hasTranslation($node->language()->getId())) {
        $entity = $entity->addTranslation($node->language()->getId(), $entity->toArray());
      }
      else {
        $entity = $entity->getTranslation($node->language()->getId());
      }
    }
  }
  else {
    // Create a new menu_link_content entity.
    $entity = MenuLinkContent::create([
      'link' => ['uri' => 'entity:node/' . $node->id()],
      'langcode' => $node->language()->getId(),
    ]);
    $entity->enabled->value = 1;
  }
  $entity->title->value = trim($values['title']);
  $entity->description->value = trim($values['description']);
  $entity->menu_name->value = $values['menu_name'];
  $entity->parent->value = $values['parent'];
  $entity->weight->value = $values['weight'] ?? 0;
  $entity->isDefaultRevision($node->isDefaultRevision());

  // Extra menu fields.
  $entity->expanded->value = !empty($values['expanded']);
  $entity->enabled->value = !empty($values['visible']);

  $entity->save();
}

/**
 * Returns the menu for the given node.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The node entity.
 *
 * @return \Drupal\menu_link_content\Entity\MenuLinkContent|null
 *   The menu link for the given node.
 */
function unocha_menus_get_node_menu_link(NodeInterface $node) {
  if ($node->id()) {
    $node_type = $node->type->entity;
    $menu_name = strtok($node_type->getThirdPartySetting('menu_ui', 'parent', 'main:'), ':');
    $available_menus = $node_type->getThirdPartySetting('menu_ui', 'available_menus', ['main']);
    if (empty($available_menus)) {
      return NULL;
    }

    // Give priority to the default menu.
    if (in_array($menu_name, $available_menus)) {
      $id = unocha_menus_get_node_menu_link_id($node, [$menu_name]);
    }
    // Check all allowed menus if a link does not exist in the default menu.
    if (empty($id)) {
      $id = unocha_menus_get_node_menu_link_id($node, $available_menus);
    }
    if (!empty($id)) {
      return \Drupal::service('entity.repository')->getActive('menu_link_content', $id);
    }
  }
  return NULL;
}

/**
 * Returns the ID of the menu for the given node.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The node entity.
 * @param array $menus
 *   List of menus in which to look for a menu link for the node.
 *
 * @return int|false
 *   The menu link ID or FALSE if none could be found.
 */
function unocha_menus_get_node_menu_link_id(NodeInterface $node, array $menus) {
  $ids = \Drupal::entityQuery('menu_link_content')
    ->accessCheck(TRUE)
    ->condition('link.uri', 'entity:node/' . $node->id())
    ->condition('menu_name', array_values($menus), 'IN')
    ->sort('id', 'ASC')
    ->range(0, 1)
    ->execute();
  return empty($ids) ? FALSE : reset($ids);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\node\NodeForm.
 *
 * Display extra fields for the menu link in the node form.
 *
 * @see menu_ui_form_node_form_alter()
 */
function unocha_menus_form_node_form_alter(&$form, FormStateInterface $form_state) {
  if (!isset($form['menu']['link'])) {
    return;
  }

  $node = $form_state->getFormObject()->getEntity();
  $menu_link = unocha_menus_get_node_menu_link($node);

  $form['menu']['link']['expanded'] = [
    '#type' => 'checkbox',
    '#title' => t('Show as expanded'),
    '#description' => t('If selected and this menu link has children, the menu will always appear expanded.'),
    '#default_value' => $menu_link?->isExpanded() ?? FALSE,
  ];

  $form['menu']['link']['visible'] = [
    '#type' => 'checkbox',
    '#title' => t('Visible'),
    '#description' => t('If unchecked, this menu link will not be displayed in the menu.'),
    '#default_value' => $menu_link?->isEnabled() ?? TRUE,
  ];

  // Replace the menu_ui submit callback with ours so we can add the extra
  // fields.
  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      if (!empty($form['actions'][$action]['#submit'])) {
        foreach ($form['actions'][$action]['#submit'] as $key => $callback) {
          if ($callback === 'menu_ui_form_node_form_submit') {
            $form['actions'][$action]['#submit'][$key] = 'unocha_menus_form_node_form_submit';
          }
        }
      }

    }
  }
}

/**
 * Form submission handler for menu item field on the node form.
 *
 * Note: this is a copy of `menu_ui_form_node_form_submit()` that calls our
 * node_save() function instead of the menu_ui one.
 *
 * @see menu_ui_form_node_form_submit()
 */
function unocha_menus_form_node_form_submit($form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  if (!$form_state->isValueEmpty('menu')) {
    $values = $form_state->getValue('menu');
    if (empty($values['enabled'])) {
      if ($values['entity_id']) {
        $entity = MenuLinkContent::load($values['entity_id']);
        $entity->delete();
      }
    }
    elseif (trim($values['title'])) {
      // Decompose the selected menu parent option into 'menu_name' and
      // 'parent', if the form used the default parent selection widget.
      if (!empty($values['menu_parent'])) {
        [$menu_name, $parent] = explode(':', $values['menu_parent'], 2);
        $values['menu_name'] = $menu_name;
        $values['parent'] = $parent;
      }
      unocha_menus_node_save($node, $values);
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Hide the Moderated Content tab under /admin/content because it's uncessary
 * as we don't use complex workflows.
 */
function unocha_menus_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {
  if ($route_name == 'system.admin_content') {
    unset($data['tabs'][1]['content_moderation.content']);
  }
}
