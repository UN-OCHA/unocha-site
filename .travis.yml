dist: focal
language: php

php:
  - 8.0

# Make sure we have a recent version of docker.
addons:
  apt:
    packages:
      - docker-compose

before_script:
  # Ensure the PHP environment is ready.
  - phpenv rehash

  # Install the AWS CLI and login to the ECR. Credentials are secrets set via the UI.
  - if ! [ -x "$(command -v aws)" ]; then curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" ; unzip awscliv2.zip ; sudo ./aws/install ; fi
  - if [ "$AWS_DEFAULT_REGION" != "" ]; then aws ecr-public get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin public.ecr.aws/unocha ; fi

script:
  # Get docker information.
  - docker version
  - docker-compose version

  # PHP linting
  - test ! -d ./html/modules/custom || find -L ./html/modules/custom -iregex '.*\.\(php\|module\|inc\|install\)$' -print0 | xargs -0 -n 1 -P 4 php -l

  # Build local image.
  - make

  # Create the site and mysql containers.
  - docker-compose -p unocha-test -f tests/docker-compose.yml up -d

  # Dump some information about the created containers.
  - docker ps -a

  # Wait a bit for mysql to be ready.
  - sleep 10

  # Ensure the file directories are writable.
  - docker exec -it unocha-test-site chmod -R 777 /srv/www/html/sites/default/files /srv/www/html/sites/default/private

  # Make sure the common design subtheme is installed.
  - docker exec -it -w /srv/www unocha-test-site composer run sub-theme

  # Check coding standards.
  - docker exec -it -u appuser -w /srv/www unocha-test-site ./vendor/bin/phpcs -p --report=full ./html/modules/custom ./html/themes/custom

  # Run unit tests.
  - docker exec -it -u root -w /srv/www unocha-test-site mkdir -p /srv/www/html/sites/default/files/browser_output
  - docker exec -it -u root -w /srv/www -e BROWSERTEST_OUTPUT_DIRECTORY=/srv/www/html/sites/default/files/browser_output unocha-test-site ./vendor/bin/phpunit --testsuite Unit --debug

  # Install the site with the existing config.
  - docker exec -it unocha-test-site drush -y si --existing-config minimal install_configure_form.enable_update_status_emails=NULL
  - docker exec -it unocha-test-site drush -y en dblog

  # Create the build logs directory and make sure it's writable.
  - docker exec -it -u root unocha-test-site mkdir -p /srv/www/html/build/logs
  - docker exec -it -u root unocha-test-site chmod -R 777 /srv/www/html/build/logs

  # Run all tests and generate coverage report.
  - docker exec -it -u root -w /srv/www -e XDEBUG_MODE=coverage -e BROWSERTEST_OUTPUT_DIRECTORY=/srv/www/html/sites/default/files/browser_output -e DTT_BASE_URL=http://127.0.0.1 unocha-test-site ./vendor/bin/phpunit --coverage-clover /srv/www/html/build/logs/clover.xml --debug

after_success:
  - echo "The tests completed without errors."
  # Create directory for clover.
  - mkdir -p ./build/logs
  - chmod -R 777 ./build/logs
  - docker cp unocha-test-site:/srv/www/html/build/logs/clover.xml ./build/logs/
  # Fix source files path.
  - sed -i 's#/srv/www#.#g' build/logs/clover.xml
  # Get coveralls and execute.
  - wget https://github.com/php-coveralls/php-coveralls/releases/download/v2.5.3/php-coveralls.phar
  - chmod +x php-coveralls.phar
  - ./php-coveralls.phar -vv

after_failure:
  - echo "The tests failed. Please check the output above for problems."
  - docker exec -it unocha-test-site drush watchdog:show --extended
