## Mapbox proxy.
location /mapbox/ {
  ## Retrieve the mapbox access token.
  set_by_lua $mapbox_token 'return os.getenv("MAPBOX_TOKEN") or ""';
  if ($mapbox_token = "") {
    return 404;
  }

  ## Replace the mapbox access token.
  set_by_lua_block $mapbox_request_uri {
    local token = ngx.var.mapbox_token
    local args = ngx.var.request_uri
    if (args ~= nil) then
      args = args:gsub("^/mapbox", "", 1)
      args = args:gsub("access_token=token", "access_token=" .. token, 1)
    end
    return args
  }

  ## Remove cookies.
  more_clear_input_headers Cookie;

  ## Ensure the proxy host is in a variable, so nginx will not cache the IP
  ## indefinitely and cause 502 errors if the IPs change.
  set $mapbox_host "api.mapbox.com";

  ## Proxy the request to the mapbox API.
  proxy_ssl_server_name on;
  proxy_set_header Host $mapbox_host;
  proxy_pass https://$mapbox_host$mapbox_request_uri;
  proxy_http_version 1.1;
  proxy_redirect off;
  proxy_intercept_errors on;

  ## Remove the sku parameter as it's always different.
  set $cache_uri $mapbox_request_uri;
  if ($cache_uri ~ "^(.*)[?&]sku=[^&]+(.*)$") {
    set $cache_uri $1$2;
  }

  ## Cache the resources for 14 days.
  proxy_buffering on;
  proxy_cache mapbox_proxy_cache;
  proxy_cache_key $scheme$proxy_host$cache_uri;
  proxy_ignore_headers Expires Cache-Control Set-Cookie Vary;
  proxy_cache_valid 200 14d;
  proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
  proxy_cache_background_update on;
  proxy_cache_lock on;
  proxy_cache_lock_age 25s;
  proxy_cache_lock_timeout 30s;
  proxy_cache_revalidate on;

  ## Add an header to be check if we hit the cache.
  add_header X-Nginx-Cache $upstream_cache_status;
}
